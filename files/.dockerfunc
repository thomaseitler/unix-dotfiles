#!/bin/bash
# Bash wrappers for docker run commands

#
# Helper Functions
#
dcleanup(){
	local containers
	mapfile -t containers < <(docker ps -aq 2>/dev/null)
	docker rm "${containers[@]}" 2>/dev/null
	local volumes
	mapfile -t volumes < <(docker ps --filter status=exited -q 2>/dev/null)
	docker rm -v "${volumes[@]}" 2>/dev/null
	local images
	mapfile -t images < <(docker images --filter dangling=true -q 2>/dev/null)
	docker rmi "${images[@]}" 2>/dev/null
}
del_stopped(){
	local name=$1
	local state
	state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)

	if [[ "$state" == "false" ]]; then
		docker rm "$name"
	fi
}
rmctr(){
	# shellcheck disable=SC2068
	docker rm -f $@ 2>/dev/null || true
}
relies_on(){
	for container in "$@"; do
		local state
		state=$(docker inspect --format "{{.State.Running}}" "$container" 2>/dev/null)

		if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
			echo "$container is not running, starting it for you."
			$container
		fi
	done
}

#
# Container Aliases
#

vue(){
    del_stopped vue

    docker run --rm -it \
		-v /etc/localtime:/etc/localtime:ro \
        -v "$PWD":"$PWD" \
        -w "$PWD" \
        -u "$(id -u)" \
		--name vue \
        tom/vue:1.0 "$@"
}

go(){
    docker run --rm -it \
        -v "$PWD":/usr/src/myapp \
        -w /usr/src/myapp \
        -v /go:/go \
        --name "go-cli" \
        --net="host" \
        -e CGO_ENABLED=0 \
        -e GOOS=linux \
        -e GOARCH=amd64 \
        -e GOBIN=/go/bin \
        tom/go-cli:1.0 "$@" 
}

mongodb(){
    del_stopped mongodb

    docker run --rm -d \
        -v /srv/mongo/data/db:/data/db \
        -p 27017:27017 \
        --name mongodb \
        --hostname MONGODB \
        --net=bridge \
        --expose=27017 \
        mongo --bind_ip_all
}
